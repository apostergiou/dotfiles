[alias]
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort

    p = push
    s = status
    co = checkout
    cob = checkout -b
    c = commit
    cm = !git add -A && git commit
    f = fetch -p
    m = checkout master
    d = diff
    fold = commit --amend

    #
    # improve work flow
    #
    prune = fetch --prune
    glog  = "!f() { git log --color --graph -n ${1-100} --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit; }; f"
    ggrep = grep --break --heading --line-number
    save = !git add -A && git commit -m 'SAVEPOINT'
    undo = reset HEAD~1 --mixed
    up = pull --rebase --prune
    rb = rebase -i origin/master
    rba = rebase -i --autosquash origin/master
    confl = !git ggrep -e '<<<<<<< HEAD' -e '>>>>>>>' -e '^=======$'
    stash-all = stash save --include-untracked
    sha = !git log | grep -m1 -oE '[^ ]+$'

    # remove branches that have been deleted from remote
    bprune = "!f() { git fetch -p |git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d; }; f"

    # create an empty commit with sample message
    empty = !git commit --allow-empty -m "placeholder"

    # keep the commit only for git reflog usage and as a reference
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # cleanup merged braches
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commit -m \"Initial commit\"

    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/

    # List contributors with number of commits
    contr = shortlog --summary --numbered

    # Delete all branches except master
    brdforce = !git branch | grep -v "master" | xargs git branch -D

    # Search commit logs
    # e.g. git cgrep "module"
    cgrep = "!f() { git log --reverse --patch --pickaxe-all -S \"$1\"; }; f"

    # Save credentials to memory
    cache = !git config credential.helper cache

    # better git log
    # git lg -p <file> to show changed lines
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # git history for file
    history = "!f() { git log --follow -p \"$1\"; }; f"

    # git history of lines
    # usage: git evolution 122,138:app/api/shop/orders.rb
    evolution = "!f() { git log -L \"$1\"; }; f"

    # git add patch includes new files
    gapan = !git add --intent-to-add . && git add --patch

    # find commit that introduced string
    sgrep = "!f() { git log -S \"$1\" --source --all; }; f"

[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = red

[core]
    editor = vim
	excludesfile = /Users/apostolisstergiou/.gitignore_global

[push]
    default = simple

[grep]
    lineNumber = true

[pager]
    diff = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX

[url "https://github.com/"]
    insteadOf = gh:

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://bitbucket.org/"]
    insteadOf = bb:

[user]
    name = Apostolis Stergiou
    email = apostergiou@gmail.com
[url "git@github.com:"]
	insteadOf = https://github.com/
