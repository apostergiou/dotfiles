# use bashrc
# set-option -g default-command bash
# set Zsh as your default Tmux shell
set-option -g default-shell /bin/zsh

# set the status line's colors
set -g status-fg white
set -g status-bg black

# set the color of the window list
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim

# set colors for the active window
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright

# pane colors
set -g pane-border-fg red
set -g pane-active-border-fg green
set -g pane-border-bg black

# command / message line
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# example of using a shell command in the status line
set -g status-left '#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'

# set window split
bind-key | split-window -h
bind-key - split-window -v

# command delay? We don't want that, make it short
set -sg escape-time 1

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
# clock
set-window-option -g clock-mode-colour green #green

set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140

# change prefix to C-a
set-option -g prefix C-a
bind C-a send-prefix
unbind C-b

# start numbering at 1
set -g base-index 1

# allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# vi copypaste mode
set-window-option -g mode-keys vi
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-pipe 'xclip -in -selection clipboard'

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panels
bind -r J resize-pane -D 4
bind -r K resize-pane -U 4
bind -r L resize-pane -R 8
bind -r H resize-pane -L 8

# set to main-horizontal, 60% height for main pane
bind m set-window-option main-pane-height 60\; select-layout main-horizontal

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename
set-window-option -g automatic-rename

# color
set -g default-terminal "screen-256color"

# tmux panel editing
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window 'vim /tmp/tmux-buffer'

# maximize and restore a pane
unbind Up
unbind Down
bind Up new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
bind Down last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom

# log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

unbind +
bind + resize-pane -Z

# cycle through panes
unbind ^A
bind ^A select-pane -t :.+

# tile all windows
unbind =
bind = select-layout tiled
